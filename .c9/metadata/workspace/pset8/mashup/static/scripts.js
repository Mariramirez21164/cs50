{"changed":false,"filter":false,"title":"scripts.js","tooltip":"/pset8/mashup/static/scripts.js","value":"// Google Map\nlet map;\n\n// Markers for map\nlet markers = [];\n\n// Info window\nlet info = new google.maps.InfoWindow();\n\n// Execute when the DOM is fully loaded\n$(document).ready(function() {\n\n    // Styles for map\n    // https://developers.google.com/maps/documentation/javascript/styling\n    let styles = [\n\n        // Hide Google's labels\n        {\n            featureType: \"all\",\n            elementType: \"labels\",\n            stylers: [\n                {visibility: \"off\"}\n            ]\n        },\n\n        // Hide roads\n        {\n            featureType: \"road\",\n            elementType: \"geometry\",\n            stylers: [\n                {visibility: \"off\"}\n            ]\n        }\n\n    ];\n\n    // Options for map\n    // https://developers.google.com/maps/documentation/javascript/reference#MapOptions\n    let options = {\n        center: {lat: 37.4225, lng: -122.165278}, // Stanford, California\n        disableDefaultUI: true,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        maxZoom: 14,\n        panControl: true,\n        styles: styles,\n        zoom: 14,\n        zoomControl: true\n    };\n\n    // Get DOM node in which map will be instantiated\n    let canvas = $(\"#map-canvas\").get(0);\n\n    // Instantiate map\n    map = new google.maps.Map(canvas, options);\n\n    // Configure UI once Google Map is idle (i.e., loaded)\n    google.maps.event.addListenerOnce(map, \"idle\", configure);\n    \n});\n\n\n// Add marker for place to map\nfunction addMarker(place)\n{\n    // https://developers.google.com/maps/documentation/javascript/reference/3.exp/marker#Icon\n\n    // Origins, anchor positions and coordinates of the marker increase in the X\n    // direction to the right and in the Y direction down.\n    var image = {\n        url: '/static/information.png',\n        // Marker size\n        size: new google.maps.Size(32, 37),\n        // Marker origin\n        origin: new google.maps.Point(0, 0),\n        // Anchor this image to the center \n        anchor: new google.maps.Point(0, 32),\n        // Set the label origin under logo.\n        labelOrigin: new google.maps.Point(15, 45)\n    };\n    // Create a marker with their options\n    var marker = new google.maps.Marker({\n        position: {lat: place.latitude, lng: place.longitude},\n        map: map,\n        icon: image,\n        label: place.place_name\n    });\n\n    markers.push(marker);\n\n    /*  read $.getJSON documentation to understand\n        https://api.jquery.com/jQuery.getJSON/\n        Also this should help\n        https://docs.cs50.net/2018/x/psets/8/mashup/mashup.html#scripts-js\n    */\n    \n    google.maps.event.addListener(marker, 'click', function(){\n    \n        // Get postal codes from markers\n        let parameters = {\n            geo: place.postal_code\n        };\n\n        $.getJSON(\"/articles\", parameters, function(data, textStatus, jqXHR) {\n            \n            let articulos = \"<ul>\";\n    \n            // Add 'i' articles to info window\n            for (let i = 0; i < 5; i++)\n            {\n                // Create a list item with news'title and link and add it to 'articulos'\n                // Also make the link open in a new tab.\n                articulos += '<strong><li><a href=' + data[i].link + ' target=\"_blank\" >' + data[i].title + '</li>';\n            }\n    \n            articulos += \"</ul>\";\n            \n            showInfo(marker, articulos);\n        });\n    \n    });\n}\n\n// Configure application\nfunction configure()\n{\n    // Update UI after map has been dragged\n    google.maps.event.addListener(map, \"dragend\", function() {\n\n        // If info window isn't open\n        // http://stackoverflow.com/a/12410385\n        if (!info.getMap || !info.getMap())\n        {\n            update();\n        }\n    });\n\n    // Update UI after zoom level changes\n    google.maps.event.addListener(map, \"zoom_changed\", function() {\n        update();\n    });\n\n    // Configure typeahead\n    $(\"#q\").typeahead({\n        highlight: false,\n        minLength: 1\n    },\n    {\n        display: function(suggestion) { return null; },\n        limit: 10,\n        // Search function is called when user starts typing\n        source: search,\n        templates: {\n            suggestion: Handlebars.compile(\n                // Suggestion displayed while searching\n                \"<div> {{place_name}}, {{admin_name1}}, {{postal_code}} </div>\"\n            )\n        }\n    });\n\n    // Re-center map after place is selected from drop-down\n    $(\"#q\").on(\"typeahead:selected\", function(eventObject, suggestion, name) {\n\n        // Set map's center\n        map.setCenter({lat: parseFloat(suggestion.latitude), lng: parseFloat(suggestion.longitude)});\n\n        // Update UI\n        update();\n    });\n\n    // Hide info window when text box has focus\n    $(\"#q\").focus(function(eventData) {\n        info.close();\n    });\n\n    // Re-enable ctrl- and right-clicking (and thus Inspect Element) on Google Map\n    // https://chrome.google.com/webstore/detail/allow-right-click/hompjdfbfmmmgflfjdlnkohcplmboaeo?hl=en\n    document.addEventListener(\"contextmenu\", function(event) {\n        event.returnValue = true; \n        event.stopPropagation && event.stopPropagation(); \n        event.cancelBubble && event.cancelBubble();\n    }, true);\n\n    // Update UI\n    update();\n\n    // Give focus to text box\n    $(\"#q\").focus();\n}\n\n\n// Remove markers from map\nfunction removeMarkers()\n{\n    // Removes the markers from the map but keeps them in the array\n    for (let i = 0; i < markers.length; i++)\n    {\n        markers[i].setMap(null);\n    }\n    \n    // Deletes the markers by removing the reference from the array. \n    markers = [];\n}\n\n\n// Search database for typeahead's suggestions\nfunction search(query, syncResults, asyncResults)\n{\n    // Get places matching query (asynchronously)\n    let parameters = {\n        q: query\n    };\n    $.getJSON(\"/search\", parameters, function(data, textStatus, jqXHR) {\n     \n        // Call typeahead's callback with search results (i.e., places)\n        asyncResults(data);\n    });\n}\n\n\n// Show info window at marker with content\nfunction showInfo(marker, content)\n{\n    // Start div\n    let div = \"<div id='info'>\";\n    if (typeof(content) == \"undefined\")\n    {\n        // http://www.ajaxload.info/\n        div += \"<img alt='loading' src='/static/ajax-loader.gif'/>\";\n    }\n    else\n    {\n        div += content;\n    }\n\n    // End div\n    div += \"</div>\";\n\n    // Set info window's content\n    info.setContent(div);\n\n    // Open info window (if not already open)\n    info.open(map, marker);\n}\n\n\n// Update UI's markers\nfunction update() \n{\n    // Get map's bounds\n    let bounds = map.getBounds();\n    let ne = bounds.getNorthEast();\n    let sw = bounds.getSouthWest();\n\n    // Get places within bounds (asynchronously)\n    let parameters = {\n        ne: `${ne.lat()},${ne.lng()}`,\n        q: $(\"#q\").val(),\n        sw: `${sw.lat()},${sw.lng()}`\n    };\n    $.getJSON(\"/update\", parameters, function(data, textStatus, jqXHR) {\n\n       // Remove old markers from map\n       removeMarkers();\n\n       // Add new markers to map\n       for (let i = 0; i < data.length; i++)\n       {\n           addMarker(data[i]);\n       }\n    });\n    \n}\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":10,"column":22},"end":{"row":10,"column":22},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1531495313435}